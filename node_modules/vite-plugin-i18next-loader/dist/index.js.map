{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import path from 'node:path'\n\nimport { setProperty } from 'dot-prop'\nimport { IgnoreLike } from 'glob'\nimport { marked } from 'marked'\nimport TerminalRenderer from 'marked-terminal'\nimport { merge } from 'ts-deepmerge'\nimport { createLogger, LogLevel, Plugin } from 'vite'\n\nimport {\n  assertExistence,\n  enumerateLangs,\n  findAll,\n  jsNormalizedLang,\n  loadAndParse,\n  resolvedVirtualModuleId,\n  resolvePaths,\n  virtualModuleId,\n} from './utils.js'\n\nmarked.setOptions({\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment\n  renderer: new TerminalRenderer(),\n})\n\n// unfortunately not exported\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Options {\n  /**\n   * Set to 'info' for noisy information.\n   *\n   * Default: 'warn'\n   */\n  logLevel?: LogLevel\n\n  /**\n   * Glob patterns to match files\n   *\n   * Default: ['**\\/*.json', '**\\/*.yml', '**\\/*.yaml']\n   */\n  include?: string[]\n\n  /**\n   * Glob patterns to exclude/ignore\n   *\n   * @see https://github.com/isaacs/node-glob\n   */\n  ignore?: string | string[] | IgnoreLike\n\n  /**\n   * Locale top level directory paths ordered from least specialized to most specialized\n   *  e.g. lib locale -> app locale\n   *\n   * Locales loaded later will overwrite any duplicated key via a deep merge strategy.\n   */\n  paths: string[]\n\n  /**\n   * Default: none\n   */\n  namespaceResolution?: 'basename' | 'relativePath'\n}\n\nexport interface ResBundle {\n  [key: string]: string | object\n}\n\n// for fast match on hot reloading check?\nlet loadedFiles: string[] = []\nlet allLangs: Set<string> = new Set()\n\nconst factory = (options: Options) => {\n  const log = createLogger(options.logLevel || 'warn', { prefix: '[i18next-loader]' })\n\n  function loadLocales() {\n    const localeDirs = resolvePaths(options.paths, process.cwd())\n    assertExistence(localeDirs)\n\n    //\n    let appResBundle: ResBundle = {}\n    loadedFiles = [] // reset\n    log.info('Bundling locales (ordered least specific to most):', {\n      timestamp: true,\n    })\n    localeDirs.forEach((nextLocaleDir) => {\n      // all subdirectories match language codes\n      const langs = enumerateLangs(nextLocaleDir)\n      allLangs = new Set([...allLangs, ...langs])\n      for (const lang of langs) {\n        const resBundle: ResBundle = {}\n        resBundle[lang] = {}\n\n        const langDir = path.join(nextLocaleDir, lang) // top level lang dir\n        const langFiles = findAll(\n          options.include || ['**/*.json', '**/*.yml', '**/*.yaml'],\n          langDir,\n          options.ignore,\n        ) // all lang files matching patterns in langDir\n\n        for (const langFile of langFiles) {\n          loadedFiles.push(langFile) // track for fast hot reload matching\n          log.info('\\t' + langFile, {\n            timestamp: true,\n          })\n\n          const content = loadAndParse(langFile)\n\n          if (options.namespaceResolution) {\n            let namespaceFilepath: string = langFile\n            if (options.namespaceResolution === 'relativePath') {\n              namespaceFilepath = path.relative(path.join(nextLocaleDir, lang), langFile)\n            } else if (options.namespaceResolution === 'basename') {\n              namespaceFilepath = path.basename(langFile)\n            }\n            const extname = path.extname(langFile)\n            const namespaceParts = namespaceFilepath.replace(extname, '').split(path.sep)\n            const namespace = [lang].concat(namespaceParts).join('.')\n            setProperty(resBundle, namespace, content)\n          } else {\n            resBundle[lang] = content\n          }\n          appResBundle = merge(appResBundle, resBundle)\n        }\n      }\n    })\n\n    // one bundle - works, no issues with dashes in names\n    // const bundle = `export default ${JSON.stringify(appResBundle)}`\n\n    // named exports, requires manipulation of names\n    let namedBundle = ''\n    for (const lang of allLangs) {\n      namedBundle += `export const ${jsNormalizedLang(lang)} = ${JSON.stringify(\n        appResBundle[lang],\n      )}\\n`\n    }\n    let defaultExport = 'const resources = { \\n'\n    for (const lang of allLangs) {\n      defaultExport += `\"${lang}\": ${jsNormalizedLang(lang)},\\n`\n    }\n    defaultExport += '}'\n    defaultExport += '\\nexport default resources\\n'\n\n    const bundle = namedBundle + defaultExport\n\n    log.info(`Locales module '${resolvedVirtualModuleId}':`, {\n      timestamp: true,\n    })\n\n    // emulate log.info for our marked terminal output\n    if (LogLevels[options.logLevel || 'warn'] >= LogLevels['info']) {\n      // eslint-disable-next-line no-console\n      console.log(\n        marked(`\n\\`\\`\\`js\n${bundle}\n\\`\\`\\`\n`),\n      )\n    }\n    return bundle\n  }\n\n  const plugin: Plugin = {\n    name: 'vite-plugin-i18next-loader', // required, will show up in warnings and errors\n    resolveId(id) {\n      if (id === virtualModuleId) {\n        return resolvedVirtualModuleId\n      }\n      return null\n    },\n    load(id) {\n      if (id !== resolvedVirtualModuleId) {\n        return null\n      }\n\n      const bundle = loadLocales()\n      for (const file of loadedFiles) {\n        this.addWatchFile(file)\n      }\n      return bundle\n    },\n\n    /**\n     * Watch translation message files and trigger an update.\n     *\n     * @see https://github.com/vitejs/vite/pull/10333 <- TODO this is the one that would be easiest and may not be a full reload\n     */\n    async handleHotUpdate({ file, server }) {\n      const isLocaleFile =\n        file.match(/\\.(json|yml|yaml)$/) &&\n        options.paths.some((p) => file.startsWith(path.join(process.cwd(), p)))\n      if (isLocaleFile) {\n        log.info(`Changed locale file: ${file}`, {\n          timestamp: true,\n        })\n\n        const { moduleGraph } = server\n\n        const module = moduleGraph.getModuleById(resolvedVirtualModuleId)\n        if (module) {\n          await server.reloadModule(module)\n        }\n      }\n    },\n  }\n  return plugin\n}\n\nexport default factory\n","import * as fs from 'node:fs'\nimport * as path from 'node:path'\n\nimport { globSync, IgnoreLike } from 'glob'\nimport * as yaml from 'js-yaml'\n\n// don't export these from index so the external types are cleaner\nexport const virtualModuleId = 'virtual:i18next-loader'\nexport const resolvedVirtualModuleId = '\\0' + virtualModuleId\n\nexport function jsNormalizedLang(lang: string) {\n  return lang.replace(/-/g, '_')\n}\n\nexport function enumerateLangs(dir: string) {\n  return fs.readdirSync(dir).filter(function (file) {\n    return fs.statSync(path.join(dir, file)).isDirectory()\n  })\n}\n\n// https://github.com/isaacs/node-glob\nexport function findAll(\n  pattern: string | string[],\n  cwd: string,\n  ignore?: string | string[] | IgnoreLike,\n): string[] {\n  // remove this exclusion check late, say 12/2025, but need to remind users of the change to glob and exclusions\n  if (typeof pattern === 'string' && pattern.includes('!')) {\n    throw new Error('Exclusions are not supported in pattern. Use the `ignore` option instead.')\n  }\n  // now throw error for arrays\n  if (Array.isArray(pattern)) {\n    for (const p of pattern) {\n      if (p.includes('!')) {\n        throw new Error('Exclusions are not supported in pattern. Use the `ignore` option instead.')\n      }\n    }\n  }\n\n  const result = globSync(pattern, { cwd, absolute: true, realpath: true, ignore })\n  return result\n}\n\nexport function resolvePaths(paths: string[], cwd: string) {\n  return paths.map((override) => {\n    if (path.isAbsolute(override)) {\n      return override\n    } else {\n      return path.join(cwd, override)\n    }\n  })\n}\n\nexport function assertExistence(paths: string[]) {\n  for (const dir of paths) {\n    if (!fs.existsSync(dir)) {\n      throw new Error(`Directory does not exist: ${dir}`)\n    }\n  }\n}\n\nexport function loadAndParse(langFile: string) {\n  const fileContent = String(fs.readFileSync(langFile))\n  const extname = path.extname(langFile)\n  let parsedContent: string\n  if (extname === '.yaml' || extname === '.yml') {\n    parsedContent = yaml.load(fileContent) as string\n  } else {\n    parsedContent = JSON.parse(fileContent) as string\n  }\n  return parsedContent\n}\n"],"mappings":"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","names":["path","setProperty","marked","TerminalRenderer","merge","createLogger","fs","path","globSync","yaml","virtualModuleId","resolvedVirtualModuleId","jsNormalizedLang","lang","enumerateLangs","dir","file","findAll","pattern","cwd","ignore","p","resolvePaths","paths","override","assertExistence","loadAndParse","langFile","fileContent","extname","parsedContent","marked","TerminalRenderer","LogLevels","loadedFiles","allLangs","factory","options","log","createLogger","loadLocales","localeDirs","resolvePaths","assertExistence","appResBundle","nextLocaleDir","langs","enumerateLangs","lang","resBundle","langDir","path","langFiles","findAll","langFile","content","loadAndParse","namespaceFilepath","extname","namespaceParts","namespace","setProperty","merge","namedBundle","jsNormalizedLang","defaultExport","bundle","resolvedVirtualModuleId","id","virtualModuleId","file","server","p","moduleGraph","module","index_default"]}